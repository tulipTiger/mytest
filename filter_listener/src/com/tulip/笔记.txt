-[1] Filter 过滤器 , Listener 监听器

-[2] Filter 作用

-[3] Filter 创建, 使用

-[4] Filter 细节

因为 servlet 版本 原因, 目前 Servlet2.4 以及之后  默认 Filter 拦截器 只拦截 request 方法 的资源:
即 只拦截 客户端(浏览器) 请求的资源 , 会被 filter 拦截

    因为 在 进行 filter 配置中, dispatcher 默认为 REQUEST , 若需要 forward 请求 转发, 错误异常页面跳转  也 会 进行 filter 拦截器 拦截 需要 手动配置 dispatcher 的 值,可以 存在 多个 dispatcher
    <!--   默认 客户端(浏览器) 发送 请求  进行 filter 拦截     -->
    <dispatcher>REQUEST</dispatcher>

    <!--   进行 请求 转发 时 也会 进行 filter 拦截     -->
    <dispatcher>FORWARD</dispatcher>

    <!--   包含 访问资源 也会 进行 filter 拦截     -->
    <dispatcher>INCLUDE</dispatcher>

    <!--   异常 页面 也会 被 filter 拦截      -->
    <dispatcher>ERROR</dispatcher>

    <!--   进行 异步 请求 会 被 filter 拦截      -->
    <dispatcher>ASYNC</dispatcher>

    拦截器/过滤器 执行顺序:
        一个 资源路径  被多个 拦截器 拦截, 那么 会 根据 filter-mapping 设置的先后 顺序 来进行 那个 filter 先执行,那个 filter 后执行   -->

1. 案例1_登录验证
* 需求：
    1. 访问day17_case案例的资源。验证其是否登录
    2. 如果登录了，则直接放行。
    3. 如果没有登录，则跳转到登录页面，提示"您尚未登录，请先登录"。

2. 案例2_敏感词汇过滤
* 需求：
    1. 对day17_case案例录入的数据进行敏感词汇过滤
    2. 敏感词汇参考《敏感词汇.txt》
    3. 如果是敏感词汇，替换为 ***



-[] Listener 作用
    - java Web 三大组件 之一  (Servlet,Filter,Listener)
    - 事件监听机制
        -1  事件 是什么?
            事件: 某 事物 发生 什么情况 .
        -2  事件源  是什么?
            事件源: 能够进行 发生某情况 的 事物
        -3  监听器 是什么?
            一个对象/执行 代码
        -4  注册 监听 是什么?
            将 事件, 事件源, 监听器 捆绑在一起,
            当 事件源 发生 事件 调用 监听器
